@{
    ViewBag.Title = "Home Page";
}


<script src="http://maps.google.com/maps/api/js?language=bg-BG&libraries=places" type="text/javascript"></script>

<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>


<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<input id="latLng_input" class="controls" type="text">


<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 600px;"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    <section class="scripts">

        <script type="text/javascript">

    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        initAutocomplete();
    });


            function initAutocomplete() {
                var map = new google.maps.Map(document.getElementById('map_canvas'), {
                    center: {lat: -33.8688, lng: 151.2195},
                    zoom: 13,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                // Create the search box and link it to the UI element.
                var input = document.getElementById('pac-input');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                // Bias the SearchBox results towards current map's viewport.
                map.addListener('bounds_changed', function() {
                    searchBox.setBounds(map.getBounds());
                });


                google.maps.event.addListener(map, 'click', function(event) {
                    addMarker(event.latLng, map);
                });

                var markers = [];
                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener('places_changed', function() {
                    var places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach(function(marker) {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function(place) {
                        var icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        // Create a marker for each place.
                        var marker = new google.maps.Marker({
                            map: map,
                            //icon: icon,
                            title: place.name,
                            draggable: true,
                            position: place.geometry.location
                        });

                        geocodePosition(marker.getPosition());


                        google.maps.event.addListener(marker, 'click', function () {
                            infowindow.open(map, marker);
                        });

                        google.maps.event.addListener(marker, 'dragend', function() {
                            //updateMarkerStatus('Drag ended');
                            geocodePosition(marker.getPosition());
                        });
                        marker.addListener('click', toggleBounce);

                        markers.push(marker);

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });

                    map.fitBounds(bounds);
                });
            }





    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Liverpool = new google.maps.LatLng(53.408841, -2.981397);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 14,
            center: Liverpool,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };


        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);


        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });



            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            //google.maps.event.addListener(marker, 'click', function () {
            //    infowindow.open(map, marker);
            //});

            google.maps.event.addListener(map, 'click', function(event) {
                addMarker(event.latLng, map);
            });

        }

        function geocodePosition(pos) {
            geocoder = new google.maps.Geocoder();
            geocoder.geocode({
                latLng: pos
            }, function(responses) {
                if (responses && responses.length > 0) {

                    //updateMarkerAddress(responses[0].formatted_address);

                    console.log($('#latLng_input'));

                    $('#latLng_input').val(pos.lat() + "," + pos.lng());

                    console.log(responses);
                    console.log(pos.lat());
                    console.log(pos.lng());

                } else {
                    //updateMarkerAddress('Cannot determine address at this location.');
                    console.log(responses);
                }
            });
        }


        function addMarker(location, map) {
            // Add the marker at the clicked location, and add the next-available label
            // from the array of alphabetical characters.
            var marker = new google.maps.Marker({
                position: location,
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP
            });

            geocodePosition(marker.getPosition());

            google.maps.event.addListener(marker, 'dragend', function() {
                //updateMarkerStatus('Drag ended');
                geocodePosition(marker.getPosition());
            });
            marker.addListener('click', toggleBounce);
        }

        function toggleBounce() {
            if (marker.getAnimation() !== null) {
                marker.setAnimation(null);
            } else {
                marker.setAnimation(google.maps.Animation.BOUNCE);
            }
        }



        </script>
    </section>
}
